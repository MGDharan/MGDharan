{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyMJ2Psm+C+Ye6wMXBxdx44J",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MGDharan/MGDharan/blob/main/python%20day-2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# And write a program to find the lists of odd numbers and even numbers\n",
        "# separately. And, to find the square of its odd and even lists.\n",
        "\n",
        "\n",
        "a=[1,2,3,4,5,6,7,8,9,10]\n",
        "e=[]\n",
        "o=[]\n",
        "for i in a:\n",
        "    if i%2==0:\n",
        "        e.append(i)\n",
        "    else:\n",
        "        o.append(i)\n",
        "sq1=[x**2 for x in e]\n",
        "sq2=[x**2 for x in o]\n",
        "print('even',e)\n",
        "print('odd',o)\n",
        "print('square in even',sq1)\n",
        "print('square in odd',sq2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rrFrgjsPc5Di",
        "outputId": "345029ee-8ea3-4c1e-aa37-2f459b95c62b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "even [2, 4, 6, 8, 10]\n",
            "odd [1, 3, 5, 7, 9]\n",
            "square in even [4, 16, 36, 64, 100]\n",
            "square in odd [1, 9, 25, 49, 81]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#find largest and smallest number in the list without using in bulit funtion\n",
        "n=[int(x) for x in input () .split()]\n",
        "for i in range(len(n)):\n",
        "  for j in range(i+1,len(n)):\n",
        "    if n[i]>n[j]:\n",
        "      n[i],n[j]=n[j],n[i]\n",
        "print(n)\n",
        "print('smallest number:',n[0])\n",
        "print('largest number:',n[len(n)-1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "15TAtmGOduIn",
        "outputId": "0acee0c7-c826-473a-d08d-6614233bfb23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4 5 2 1 8 7 \n",
            "[1, 2, 4, 5, 7, 8]\n",
            "smallest number: 1\n",
            "largest number: 8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#find largest and second smallest number in the list without using in bulit funtion\n",
        "n=[int(x) for x in input () .split()]\n",
        "for i in range(len(n)):\n",
        "  for j in range(i+1,len(n)):\n",
        "    if n[i]>n[j]:\n",
        "      n[i],n[j]=n[j],n[i]\n",
        "print(n)\n",
        "print('smallest number:',n[1])\n",
        "print('largest number:',n[len(n)-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YtB8qci0jZS7",
        "outputId": "04becf40-741d-48ae-b84d-85344c02094a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4 2 8 6 3 7 \n",
            "[2, 3, 4, 6, 7, 8]\n",
            "smallest number: 3\n",
            "largest number: 8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Write a program to sort elements stored in the list as Ascending order and Descending order\n",
        "a=input('')\n",
        "b=a[::-1]\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O5LP6v65jiNS",
        "outputId": "6eba7690-2324-4149-e9f0-0bb48d3dc71d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2356789\n",
            "9876532\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Find the index position of the specific number stored in the list.\n",
        "n=[int(x) for x in input () .split()]\n",
        "a=int(input(''))\n",
        "for i in n:\n",
        "  if(a==i):\n",
        "    print(f'index position{a} in ',n.index(i))"
      ],
      "metadata": {
        "id": "_ftXSKQrlGVA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40ca5558-f615-458e-8f03-185c2fadb0f5"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "22 55 66 33 77 88 99 \n",
            "66\n",
            "index position66 in  2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Find most frequent element present in a list.\n",
        "a=[4,5,6,4,7,4,1,4,2,3,4,9,4]\n",
        "b=max(set(a), key = a.count)\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vWtnhp5ppwg9",
        "outputId": "c112d1aa-64e4-41a1-eaa8-8a8772c92b69"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a Python program to convert them into a dictionary in a way that item from list1\n",
        "keys = ['one', 'Two', 'Three']\n",
        "values = [1, 2, 3]\n",
        "dictionary = { }\n",
        "dictionary.update(zip(keys, values))\n",
        "print(dictionary)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZAcheZZxrkrg",
        "outputId": "f3ac55ae-e748-4a87-bd78-c5e5f3b3e1da"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'one': 1, 'Two': 2, 'Three': 3}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a list of 10 members as a Voter_list.\n",
        "print('A,B,C')\n",
        "a=['giri','vijay','ram','raja','rahul','jadaja','gowtham','hari','deesan','vel']\n",
        "print('vote for A press1')\n",
        "print('vote for B press2')\n",
        "print('vote for C press3')\n",
        "print('vote for nota')\n",
        "A=0\n",
        "B=0\n",
        "C=0\n",
        "D=0\n",
        "for i in a:\n",
        "    print(i,'enter the option')\n",
        "    b=int(input(''))\n",
        "    match(b):\n",
        "        case 1:\n",
        "            A=A+1\n",
        "        case 2:\n",
        "            B=B+1\n",
        "        case 3:\n",
        "            C=C+1\n",
        "        case 4:\n",
        "            D=D+1\n",
        "if (A>B and A>C and A>D):\n",
        "    print('A is win')\n",
        "    print('B AND C are looser')\n",
        "elif(B>A and B>C and B>D):\n",
        "    print('B is win')\n",
        "    print('A and C are the looser ')\n",
        "elif(C>A and C>B and C>D):\n",
        "    print('C is win')\n",
        "    print('B and A are the looser')\n",
        "else:\n",
        "    print('nota is lead')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RMPObCJtsap_",
        "outputId": "92c4341b-1df2-4655-8f5d-acaa12760bdc"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A,B,C\n",
            "vote for A press1\n",
            "vote for B press2\n",
            "vote for C press3\n",
            "vote for nota\n",
            "giri enter the option\n",
            "2\n",
            "vijay enter the option\n",
            "1\n",
            "ram enter the option\n",
            "1\n",
            "raaja enter the option\n",
            "2\n",
            "rahul enter the option\n",
            "3\n",
            "jadaja enter the option\n",
            "2\n",
            "gowtham enter the option\n",
            "4\n",
            "hari enter the option\n",
            "2\n",
            "deesan enter the option\n",
            "3\n",
            "vel enter the option\n",
            "1\n",
            "B is win\n",
            "A and C are the looser \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#write a program to calculate the following functions:\n",
        "def rupee_to_dollar(rupees):\n",
        "  dollars = rupees / 75\n",
        "  return dollars\n",
        "\n",
        "\n",
        "def celsius_to_fahrenheit(celsius):\n",
        "  fahrenheit = (celsius * 9/5) + 32\n",
        "  return fahrenheit\n",
        "\n",
        "\n",
        "def bmi_calculation(weight, height):\n",
        "  bmi = weight / (height * height)\n",
        "  return bmi\n",
        "\n",
        "\n",
        "def simple_interest(principal, rate, time):\n",
        "  interest = (principal * rate * time) / 100\n",
        "  return interest\n",
        "\n",
        "\n",
        "rupees = float(input(\"Enter amount in Rupees: \"))\n",
        "celsius = float(input(\"Enter temperature in Celsius: \"))\n",
        "weight = float(input(\"Enter weight in kilograms: \"))\n",
        "height = float(input(\"Enter height in meters: \"))\n",
        "principal = float(input(\"Enter principal amount: \"))\n",
        "rate = float(input(\"Enter rate of interest: \"))\n",
        "time = float(input(\"Enter time in years: \"))\n",
        "\n",
        "\n",
        "dollars = rupee_to_dollar(rupees)\n",
        "fahrenheit = celsius_to_fahrenheit(celsius)\n",
        "bmi = bmi_calculation(weight, height)\n",
        "interest = simple_interest(principal, rate, time)\n",
        "\n",
        "print(\"Converted amount in Dollars:\", dollars)\n",
        "print(\"Converted temperature in Fahrenheit:\", fahrenheit)\n",
        "print(\"BMI:\", bmi)\n",
        "print(\"Simple Interest:\", interest)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qwqxabc349YB",
        "outputId": "bb1b635d-d290-4ae9-d7ae-92be53a16c8a"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter amount in Rupees: 5\n",
            "Enter temperature in Celsius: 55\n",
            "Enter weight in kilograms: 83\n",
            "Enter height in meters: 55\n",
            "Enter principal amount: 100\n",
            "Enter rate of interest: 150\n",
            "Enter time in years: 2024\n",
            "Converted amount in Dollars: 0.06666666666666667\n",
            "Converted temperature in Fahrenheit: 131.0\n",
            "BMI: 0.02743801652892562\n",
            "Simple Interest: 303600.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a program to get 0s and 1s in the list:\n",
        "input_list = [0,1,0,1,1,0,1,0,1,0]\n",
        "output_list = []\n",
        "\n",
        "for element in input_list:\n",
        "    if element == 0:\n",
        "        output_list.append(0)\n",
        "    else:\n",
        "        output_list.append(1)\n",
        "\n",
        "print(output_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EqkeeMBx5imo",
        "outputId": "6f59cf8c-56e0-4e3b-eb4f-a405fc5ea763"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 0, 1, 1, 0, 1, 0, 1, 0]\n"
          ]
        }
      ]
    }
  ]
}